"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _hammerjs = _interopRequireDefault(require("hammerjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

// generate <resize> component unique id
function createId() {
  var id = -1;
  return function () {
    id = id + 1;
    return id;
  };
}

var getResizeId = createId(); // default handle style

var default_handle_width = "5px";
var default_handle_color = "#999";

var Resize =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Resize, _React$Component);

  function Resize(props) {
    var _this;

    _classCallCheck(this, Resize);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Resize).call(this, props));
    _this.state = {
      resizeType: "",
      resizeId: getResizeId(),
      handleWidth: default_handle_width,
      handleColor: default_handle_color,
      onResizeStart: function onResizeStart() {},
      onResizeStop: function onResizeStop() {},
      onResizeMove: function onResizeMove() {},
      onResizeWindow: function onResizeWindow() {}
    };
    _this.updateState = _this.updateState.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.getResize = _this.getResize.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.getResizeInf = _this.getResizeInf.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.moveHandleMouseStyle = _this.moveHandleMouseStyle.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.eventHandle = _this.eventHandle.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.initialResize = _this.initialResize.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.initialVertical = _this.initialVertical.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.initialHorizon = _this.initialHorizon.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.resizeVertical = _this.resizeVertical.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.resizeHorizon = _this.resizeHorizon.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.windowResizeVertical = _this.windowResizeVertical.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.windowResizeHorizon = _this.windowResizeHorizon.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(Resize, [{
    key: "updateState",
    value: function updateState(props) {
      var handleWidth = props.handleWidth ? props.handleWidth : this.state.handleWidth;
      var handleColor = props.handleColor ? props.handleColor : this.state.handleColor;
      var onResizeStart = props.onResizeStart ? props.onResizeStart : this.state.onResizeStart;
      var onResizeStop = props.onResizeStop ? props.onResizeStop : this.state.onResizeStop;
      var onResizeMove = props.onResizeMove ? props.onResizeMove : this.state.onResizeMove;
      var onResizeWindow = props.onResizeWindow ? props.onResizeWindow : this.state.onResizeWindow;
      var resizeType = this.state.resizeType;

      if (props.children.length > 0) {
        if (props.children[0].type.myName === "ResizeHorizon") {
          resizeType = "horizon";
        } else if (props.children[0].type.myName === "ResizeVertical") {
          resizeType = "vertical";
        }
      }

      this.setState({
        resizeType: resizeType,
        handleWidth: handleWidth,
        handleColor: handleColor,
        onResizeStart: onResizeStart,
        onResizeStop: onResizeStop,
        onResizeMove: onResizeMove,
        onResizeWindow: onResizeWindow
      });
    }
  }, {
    key: "getResize",
    value: function getResize() {
      var $resize = document.querySelectorAll(".resize");
      var id = this.state.resizeId;
      var index = -1;

      for (var i = 0; i < $resize.length; i++) {
        if (id == $resize[i].getAttribute("data-resize-id")) {
          index = i;
        }
      }

      return $resize[index];
    }
  }, {
    key: "getResizeElement",
    value: function getResizeElement(className) {
      var $resize = this.getResize();

      if (className === "resize") {
        return $resize;
      }

      var $child = $resize.childNodes;
      var list = [];

      for (var i = 0; i < $child.length; i++) {
        if ($child[i].classList.contains(className)) {
          if ($child[i].getAttribute("data-show") != "none") {
            list.push($child[i]);
          }
        }
      }

      return list;
    }
  }, {
    key: "getResizeInf",
    value: function getResizeInf() {
      var type = this.state.resizeType;
      var childs = [];

      if (type === "vertical") {
        var $vertical = this.getResizeElement("resize-vertical");

        for (var i = 0; i < $vertical.length; i++) {
          childs.push({
            height: $vertical[i].getBoundingClientRect().height
          });
        }
      } else if (type === "horizon") {
        var $horizon = this.getResizeElement("resize-horizon");

        for (var _i = 0; _i < $horizon.length; _i++) {
          childs.push({
            width: $horizon[_i].getBoundingClientRect().width
          });
        }
      }

      return {
        type: type,
        resizeId: this.state.resizeId,
        resizeChilds: childs
      };
    }
  }, {
    key: "stopUserSelect",
    value: function stopUserSelect() {
      document.body.style.userSelect = "none";
      document.body.style.webkitUserSelect = "none";
      document.body.style.mozUserSelect = "none";
      document.body.style.msUserSelect = "none";
    }
  }, {
    key: "deselect",
    value: function deselect() {
      if (window.getSelection) {
        var selection = window.getSelection();
        selection.collapse(document.body, 0);
      }
    }
  }, {
    key: "onUserSelect",
    value: function onUserSelect() {
      document.body.style.userSelect = "";
      document.body.style.webkitUserSelect = "";
      document.body.style.mozUserSelect = "";
      document.body.style.msUserSelect = "";
    }
  }, {
    key: "endHandleMouseStyle",
    value: function endHandleMouseStyle() {
      document.onmouseover = function () {};

      Array.from(document.querySelectorAll(".react-resize-cursor"), function (ele) {
        ele.style.cursor = ele.getAttribute("data-react-resize-cursor");
        ele.removeAttribute("data-react-resize-cursor");
        ele.classList.remove("react-resize-cursor");
      });
    }
  }, {
    key: "moveHandleMouseStyle",
    value: function moveHandleMouseStyle(e) {
      var type = this.state.resizeType;
      var ele = e.target;

      if (!ele.classList.contains("react-resize-cursor")) {
        var cursor = ele.style.cursor ? ele.style.cursor : "";
        ele.setAttribute("data-react-resize-cursor", cursor);
        ele.classList.add("react-resize-cursor");
        ele.style.cursor = type === "vertical" ? "s-resize" : "w-resize";
      }
    }
  }, {
    key: "eventHandle",
    value: function eventHandle() {
      var _this2 = this;

      var type = this.state.resizeType;
      var $handle = [];

      if (type === "vertical") {
        $handle = this.getResizeElement("resize-handle-vertical");
      } else if (type === "horizon") {
        $handle = this.getResizeElement("resize-handle-horizon");
      }

      for (var i = 0; i < $handle.length; i++) {
        var hammertime = new _hammerjs.default($handle[i]);
        hammertime.get("pan").set({
          threshold: 1
        });
        hammertime.on("panstart", function (ev) {
          _this2.stopUserSelect();

          _this2.deselect();

          _this2.state.onResizeStart(_this2.getResizeInf());
        });
        hammertime.on("panend", function (ev) {
          _this2.endHandleMouseStyle();

          _this2.onUserSelect();

          _this2.deselect();

          _this2.state.onResizeStop(_this2.getResizeInf());
        });
        hammertime.on("panmove", function (ev) {
          document.onmouseover = _this2.moveHandleMouseStyle;

          _this2.deselect();

          if (type === "vertical") {
            _this2.resizeVertical(ev);

            _this2.state.onResizeMove(_this2.getResizeInf());
          } else if (type === "horizon") {
            _this2.resizeHorizon(ev);

            _this2.state.onResizeMove(_this2.getResizeInf());
          }
        });
      }
    }
  }, {
    key: "initialVertical",
    value: function initialVertical() {
      var $resize = this.getResizeElement("resize");
      var $vertical = this.getResizeElement("resize-vertical");
      if (!$resize || $vertical.length === 0) return; // remove handle

      var $handleVertical = this.getResizeElement("resize-handle-vertical");

      for (var i = 0; i < $handleVertical.length; i++) {
        $handleVertical[i].parentNode.removeChild($handleVertical[i]);
      }

      var handleHeight = parseInt(this.state.handleWidth);
      var handleColor = this.state.handleColor;
      var sumHeight = 0;

      for (var _i2 = 0; _i2 < $vertical.length; _i2++) {
        // vertical
        var minHeight = $vertical[_i2].getAttribute("data-min-height");

        $vertical[_i2].setAttribute("min-height", minHeight); // handle style


        var $handle = document.createElement("div");
        $handle.className = "resize-handle-vertical";
        $handle.style.height = handleHeight + "px";
        $handle.style.cursor = "s-resize";
        $handle.style.backgroundColor = handleColor;

        if ($vertical[_i2 + 1]) {
          $vertical[_i2].parentNode.insertBefore($handle, $vertical[_i2].nextSibling);

          sumHeight += handleHeight;
        }

        if ($vertical.length - 1 != _i2) {
          sumHeight += $vertical[_i2].getBoundingClientRect().height;
        }
      }

      $vertical[$vertical.length - 1].style.height = $resize.getBoundingClientRect().height - sumHeight + "px";
    }
  }, {
    key: "resizeVertical",
    value: function resizeVertical(e) {
      if (e.velocityY === 0) return;
      var $resize = this.getResizeElement("resize");
      var $vertical = this.getResizeElement("resize-vertical");
      var $handle = this.getResizeElement("resize-handle-vertical");
      if (!$resize || $vertical.length === 0 || $handle.length === 0) return;
      var direction = e.velocityY > 0 ? "down" : "up";
      var indx_hand = $handle.indexOf(e.target);
      var $prev = $vertical[indx_hand];
      var $next = $vertical[indx_hand + 1];
      var prevMinHeight = parseInt($prev.getAttribute("min-height"));
      var nextMinHeight = parseInt($next.getAttribute("min-height"));

      if (direction === "up") {
        var indx_prev = $vertical.indexOf($prev);

        for (var i = $vertical.length - 1; 0 <= i; i--) {
          if (indx_prev >= i) {
            if ($prev.getBoundingClientRect().height <= prevMinHeight) {
              $prev = $vertical[i];
              prevMinHeight = parseInt($prev.getAttribute("min-height"));
            }
          }
        }
      } else if (direction === "down") {
        var indx_next = $vertical.indexOf($next);

        for (var _i3 = 0; _i3 < $vertical.length; _i3++) {
          if (indx_next <= _i3) {
            if ($next.getBoundingClientRect().height <= nextMinHeight) {
              $next = $vertical[_i3];
              nextMinHeight = parseInt($next.getAttribute("min-height"));
            }
          }
        }
      }

      var prevHeight = 0;
      var nextHeight = 0;
      var sumPrevHeight = 0;
      var sumHeight = 0;
      var flag = true;

      for (var _i4 = 0; _i4 < $vertical.length; _i4++) {
        if (flag) {
          if ($handle[_i4] === e.target) {
            flag = false;
          }

          if ($vertical[_i4] != $prev) {
            sumPrevHeight += $vertical[_i4].getBoundingClientRect().height;
            sumPrevHeight += $handle[_i4].getBoundingClientRect().height;
          }
        }

        if ($vertical[_i4] !== $prev && $vertical[_i4] !== $next) {
          sumHeight += $vertical[_i4].getBoundingClientRect().height;
        }

        if ($handle[_i4]) {
          sumHeight += $handle[_i4].getBoundingClientRect().height;
        }
      }

      prevHeight = e.center.y - sumPrevHeight - $resize.getBoundingClientRect().top;
      nextHeight = $resize.getBoundingClientRect().height - (sumHeight + prevHeight);
      if (prevHeight < prevMinHeight) prevHeight = prevMinHeight;
      if (nextHeight < nextMinHeight) nextHeight = nextMinHeight;

      if (direction === "down") {
        prevHeight = $resize.getBoundingClientRect().height - sumHeight - nextHeight;
        if (prevHeight < prevMinHeight) prevHeight = prevMinHeight;
      } else if (direction === "up") {
        nextHeight = $resize.getBoundingClientRect().height - sumHeight - prevHeight;
        if (nextHeight < nextMinHeight) nextHeight = nextMinHeight;
      }

      if ($resize.getBoundingClientRect().height === sumHeight + prevHeight + nextHeight) {
        $prev.style.height = prevHeight + "px";
        $next.style.height = nextHeight + "px";
      }
    }
  }, {
    key: "windowResizeVertical",
    value: function windowResizeVertical() {
      var $resize = this.getResizeElement("resize");
      var $vertical = this.getResizeElement("resize-vertical");
      var $handle = this.getResizeElement("resize-handle-vertical");
      if (!$resize || $vertical.length === 0) return;

      if ($vertical.length === 1) {
        $vertical[0].style.height = $resize.getBoundingClientRect().height + "px";
        return;
      }

      var sum = 0;
      var remain = 0;

      for (var i = 0; i < $vertical.length; i++) {
        sum += $vertical[i].getBoundingClientRect().height;
      }

      for (var _i5 = 0; _i5 < $handle.length; _i5++) {
        sum += $handle[_i5].getBoundingClientRect().height;
      }

      remain = $resize.getBoundingClientRect().height - sum;

      if (remain > 0) {
        var last_idx = $vertical.length - 1;
        $vertical[last_idx].style.height = remain + $vertical[last_idx].getBoundingClientRect().height + "px";
      } else if (remain < 0) {
        for (var _i6 = $vertical.length - 1; 0 <= _i6; _i6--) {
          var min_height = parseInt($vertical[_i6].getAttribute("min-height"));
          remain += $vertical[_i6].getBoundingClientRect().height - min_height;

          if (remain >= 0) {
            $vertical[_i6].style.height = remain + min_height + "px";
            break;
          }

          $vertical[_i6].style.height = min_height + "px";
        }
      }

      this.state.onResizeWindow(this.getResizeInf());
    }
  }, {
    key: "initialHorizon",
    value: function initialHorizon() {
      var $resize = this.getResizeElement("resize");
      var $horizon = this.getResizeElement("resize-horizon");
      if (!$resize || $horizon.length === 0) return; // remove handle

      var $handleHorizon = this.getResizeElement("resize-handle-horizon");

      for (var i = 0; i < $handleHorizon.length; i++) {
        $handleHorizon[i].parentNode.removeChild($handleHorizon[i]);
      }

      var handleWidth = parseInt(this.state.handleWidth);
      var handleColor = this.state.handleColor;
      var sumWidth = 0;

      for (var _i7 = 0; _i7 < $horizon.length; _i7++) {
        // horizon
        var minWidth = $horizon[_i7].getAttribute("data-min-width");

        $horizon[_i7].setAttribute("min-width", minWidth); // handle style


        var $handle = document.createElement("div");
        $handle.className = "resize-handle-horizon";
        $handle.style.width = handleWidth + "px";
        $handle.style.cursor = "w-resize";
        $handle.style.backgroundColor = handleColor;
        $handle.style.height = "100%";
        $handle.style.float = "left";

        if ($horizon[_i7 + 1]) {
          $horizon[_i7].parentNode.insertBefore($handle, $horizon[_i7].nextSibling);

          sumWidth += handleWidth;
        }

        if ($horizon.length - 1 != _i7) {
          sumWidth += $horizon[_i7].getBoundingClientRect().width;
        }
      }

      $horizon[$horizon.length - 1].style.width = $resize.getBoundingClientRect().width - sumWidth + "px";
    }
  }, {
    key: "resizeHorizon",
    value: function resizeHorizon(e) {
      if (e.velocityX === 0) return;
      var $resize = this.getResizeElement("resize");
      var $horizon = this.getResizeElement("resize-horizon");
      var $handle = this.getResizeElement("resize-handle-horizon");
      if (!$resize || $horizon.length === 0 || $handle.length === 0) return;
      var direction = e.velocityX > 0 ? "right" : "left";
      var indx_hand = $handle.indexOf(e.target);
      var $prev = $horizon[indx_hand];
      var $next = $horizon[indx_hand + 1];
      var prevMinWidth = parseInt($prev.getAttribute("min-width"));
      var nextMinWidth = parseInt($next.getAttribute("min-width"));

      if (direction === "left") {
        var indx_prev = $horizon.indexOf($prev);

        for (var i = $horizon.length - 1; 0 <= i; i--) {
          if (indx_prev >= i) {
            if ($prev.getBoundingClientRect().width <= prevMinWidth) {
              $prev = $horizon[i];
              prevMinWidth = parseInt($prev.getAttribute("min-width"));
            }
          }
        }
      } else if (direction === "right") {
        var indx_next = $horizon.indexOf($next);

        for (var _i8 = 0; _i8 < $horizon.length; _i8++) {
          if (indx_next <= _i8) {
            if ($next.getBoundingClientRect().width <= nextMinWidth) {
              $next = $horizon[_i8];
              nextMinWidth = parseInt($next.getAttribute("min-width"));
            }
          }
        }
      }

      var prevWidth = 0;
      var nextWidth = 0;
      var sumPrevWidth = 0;
      var sumWidth = 0;
      var flag = true;

      for (var _i9 = 0; _i9 < $horizon.length; _i9++) {
        if (flag) {
          if ($handle[_i9] === e.target) {
            flag = false;
          }

          if ($horizon[_i9] != $prev) {
            sumPrevWidth += $horizon[_i9].getBoundingClientRect().width;
            sumPrevWidth += $handle[_i9].getBoundingClientRect().width;
          }
        }

        if ($horizon[_i9] !== $prev && $horizon[_i9] !== $next) {
          sumWidth += $horizon[_i9].getBoundingClientRect().width;
        }

        if ($handle[_i9]) {
          sumWidth += $handle[_i9].getBoundingClientRect().width;
        }
      }

      prevWidth = e.center.x - sumPrevWidth - $resize.getBoundingClientRect().left;
      nextWidth = $resize.getBoundingClientRect().width - (sumWidth + prevWidth);
      if (prevWidth < prevMinWidth) prevWidth = prevMinWidth;
      if (nextWidth < nextMinWidth) nextWidth = nextMinWidth;

      if (direction === "right") {
        prevWidth = $resize.getBoundingClientRect().width - sumWidth - nextWidth;
        if (prevWidth < prevMinWidth) prevWidth = prevMinWidth;
      } else if (direction === "left") {
        nextWidth = $resize.getBoundingClientRect().width - sumWidth - prevWidth;
        if (nextWidth < nextMinWidth) nextWidth = nextMinWidth;
      }

      if ($resize.getBoundingClientRect().width === sumWidth + prevWidth + nextWidth) {
        $prev.style.width = prevWidth + "px";
        $next.style.width = nextWidth + "px";
      }
    }
  }, {
    key: "windowResizeHorizon",
    value: function windowResizeHorizon(e) {
      var $resize = this.getResizeElement("resize");
      var $horizon = this.getResizeElement("resize-horizon");
      var $handle = this.getResizeElement("resize-handle-horizon");
      if (!$resize || $horizon.length === 0 || $handle.length === 0) return;
      var sum = 0;
      var remain = 0;

      for (var i = 0; i < $horizon.length; i++) {
        sum += $horizon[i].getBoundingClientRect().width;
      }

      for (var _i10 = 0; _i10 < $handle.length; _i10++) {
        sum += $handle[_i10].getBoundingClientRect().width;
      }

      remain = $resize.getBoundingClientRect().width - sum;

      if (remain > 0) {
        $horizon[$horizon.length - 1].style.width = remain + $horizon[$horizon.length - 1].getBoundingClientRect().width + "px";
      } else if (remain < 0) {
        for (var _i11 = $horizon.length - 1; 0 <= _i11; _i11--) {
          var min_width = parseInt($horizon[_i11].getAttribute("min-width"));
          remain += $horizon[_i11].getBoundingClientRect().width - min_width;
          0;

          if (remain >= 0) {
            $horizon[_i11].style.width = remain + min_width + "px";
            break;
          }

          $horizon[_i11].style.width = min_width + "px";
        }
      }

      this.state.onResizeWindow(this.getResizeInf());
    }
  }, {
    key: "initialResize",
    value: function initialResize() {
      var type = this.state.resizeType;

      if (type === "vertical") {
        this.initialVertical();
        this.eventHandle();
        this.windowResizeVertical();
      } else if (type === "horizon") {
        this.initialHorizon();
        this.eventHandle();
        this.windowResizeHorizon();
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.initialResize();
      var type = this.state.resizeType;

      if (type === "vertical") {
        window.addEventListener("resize", this.windowResizeVertical);
      } else if (type === "horizon") {
        window.addEventListener("resize", this.windowResizeHorizon);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var type = this.state.resizeType;

      if (type === "vertical") {
        window.removeEventListener("resize", this.windowResizeVertical);
      } else if (type === "horizon") {
        window.removeEventListener("resize", this.windowResizeHorizon);
      }
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      this.updateState(this.props);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.updateState(nextProps);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.initialResize();
    }
  }, {
    key: "render",
    value: function render() {
      var id = this.state.resizeId;
      var type = this.state.resizeType; // resize style

      var style = {
        position: "absolute",
        top: "0",
        bottom: "0",
        left: "0",
        right: "0"
      };

      if (type === "horizon") {
        style.overflow = "hidden";
      }

      return _react.default.createElement("div", {
        className: "resize",
        "data-resize-id": id,
        style: style
      }, this.props.children);
    }
  }]);

  return Resize;
}(_react.default.Component);

exports.default = Resize;