var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import flatMap from "array.prototype.flatmap";
import * as Matrix from "./matrix";
import { isFormulaValue, getReferences } from "./formula";
/**
 * For given cell and spreadsheet data returns the cells affecting the cell value
 * @param cell - cell to get bindings for
 * @param data - spreadsheet data the cell relates to
 * @returns an array of coordinates in the given spreadsheet data of the cells that affect the given cell
 */
export var getBindingsForCell = function (cell, data) {
    if (!isFormulaValue(cell.value)) {
        return [];
    }
    var formula = cell.value;
    var references = getReferences(formula);
    // Recursively get references to dependencies
    return flatMap(references, function (coords) {
        var dependency = Matrix.get(coords, data);
        var dependencyBindings = dependency
            ? getBindingsForCell(dependency, data)
            : [];
        return __spreadArray([coords], __read(dependencyBindings), false);
    });
};
