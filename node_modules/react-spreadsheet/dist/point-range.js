/**
 * Interface for ranges between two points
 */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/** Creates a normalized range between two given points */
export function create(source, target) {
    return {
        start: {
            row: Math.min(source.row, target.row),
            column: Math.min(source.column, target.column)
        },
        end: {
            row: Math.max(source.row, target.row),
            column: Math.max(source.column, target.column)
        }
    };
}
/** Iterates through all the existing points in given range */
export function iterate(range) {
    var row, column;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                row = range.start.row;
                _a.label = 1;
            case 1:
                if (!(row <= range.end.row)) return [3 /*break*/, 6];
                column = range.start.column;
                _a.label = 2;
            case 2:
                if (!(column <= range.end.column)) return [3 /*break*/, 5];
                return [4 /*yield*/, { row: row, column: column }];
            case 3:
                _a.sent();
                _a.label = 4;
            case 4:
                column++;
                return [3 /*break*/, 2];
            case 5:
                row++;
                return [3 /*break*/, 1];
            case 6: return [2 /*return*/];
        }
    });
}
/** Returns the size (rows x columns) of the given range */
export function size(range) {
    var rows = range.end.row + 1 - range.start.row;
    var columns = range.end.column + 1 - range.start.column;
    return rows * columns;
}
/** Returns whether given point exists in given range */
export function has(range, point) {
    return (point.row >= range.start.row &&
        point.column >= range.start.column &&
        point.row <= range.end.row &&
        point.column <= range.end.column);
}
/** Limits given masked range with given mask */
export function mask(masked, mask) {
    return {
        start: {
            row: mask.start.row > masked.start.row ? mask.start.row : masked.start.row,
            column: mask.start.column > masked.start.column
                ? mask.start.column
                : masked.start.column
        },
        end: {
            row: mask.end.row < masked.end.row ? mask.end.row : masked.end.row,
            column: mask.end.column < masked.end.column
                ? mask.end.column
                : masked.end.column
        }
    };
}
