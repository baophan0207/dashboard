/**
 * Immutable Set like interface of points
 */
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import * as PointMap from "./point-map";
import * as PointRange from "./point-range";
/** Returns a boolean asserting whether an point is present with the given value in the Set object or not */
export var has = function (set, point) {
    return PointMap.has(point, set);
};
/** Returns the number of points in a PointSet object */
export var size = function (set) { return PointMap.size(set); };
/** Creates a new set with all points that pass the test implemented by the provided function */
export function filter(func, set) {
    return PointMap.filter(function (_, point) { return func(point); }, set);
}
var minKey = function (object) {
    /* @ts-ignore*/
    return Math.min.apply(Math, __spreadArray([], __read(Object.keys(object)), false));
};
/** Returns the point on the minimal row in the minimal column in the set */
export function min(set) {
    var row = minKey(set);
    return { row: row, column: minKey(set[row]) };
}
var maxKey = function (object) {
    // @ts-ignore
    return Math.max.apply(Math, __spreadArray([], __read(Object.keys(object)), false));
};
/** Returns the point on the maximal row in the maximal column in the set */
export function max(set) {
    var row = maxKey(set);
    return { row: row, column: maxKey(set[row]) };
}
/** Creates a new PointSet instance from an array-like or iterable object */
export function from(points) {
    return points.reduce(function (acc, point) { return PointMap.set(point, true, acc); }, PointMap.from([]));
}
/** Transform a point set to a range */
export function toRange(set) {
    var start = min(set);
    var end = max(set);
    return PointRange.create(start, end);
}
