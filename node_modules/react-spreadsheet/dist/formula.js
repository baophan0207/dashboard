var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { extractLabel } from "hot-formula-parser";
export var FORMULA_VALUE_PREFIX = "=";
var FORMULA_REFERENCES = /\$?[A-Z]+\$?[0-9]+/g;
/** Returns whether given value is a formula */
export function isFormulaValue(value) {
    return typeof value === "string" && value.startsWith(FORMULA_VALUE_PREFIX);
}
/** Extracts formula from value  */
export function extractFormula(value) {
    return value.slice(1);
}
/**
 * For given formula returns the cell references
 * @param formula - formula to get references for
 */
export function getReferences(formula) {
    var match = formula.match(FORMULA_REFERENCES);
    return match
        ? match.map(function (substr) {
            var _a = __read(extractLabel(substr), 2), row = _a[0], column = _a[1];
            return { row: row.index, column: column.index };
        })
        : [];
}
