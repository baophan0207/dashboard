{"ast":null,"code":"var lib = require('./lib');\nvar error = require('./constants').error;\n\n/**\n * Validates that a number is a valid length (positive number)\n *\n * @private\n * @param {number} num - Number to validate\n */\nfunction _validateLength(num) {\n  if (!num || typeof num !== 'number' || num < 0) {\n    throw new Error(error.length);\n  }\n}\n\n/**\n * Tests a validation and return the result\n *\n * @private\n * @param {string} property - Property to validate\n * @return {boolean} Boolean value indicting the validity\n *           of the password against the property\n */\nfunction _isPasswordValidFor(property) {\n  return lib[property.method].apply(this, property.arguments);\n}\n\n/**\n * Registers the properties of a password-validation schema object\n *\n * @private\n * @param {string} func - Property name\n * @param {array} args - arguments for the func property\n */\nfunction _register(func, args) {\n  // Add property to the schema\n  this.properties.push({\n    method: func,\n    arguments: args\n  });\n  return this;\n}\n\n/**\n * Creates a password-validator schema\n *\n * @constructor\n */\nfunction PasswordValidator() {\n  // Initialize a schema with no properties defined\n  this.properties = [];\n}\n\n/**\n * Method to validate the password against schema\n *\n * @param {string} pwd - password to valdiate\n * @param {object} options - optional options to configure validation\n * @param {boolean} [options.list] - asks for a list of validation\n *           failures instead of just true/false\n * @return {boolean|array} Boolean value indicting the validity\n *           of the password as per schema, if 'options.list'\n *           is not set. Otherwise, it returns an array of\n *           property names which failed validations\n */\nPasswordValidator.prototype.validate = function (pwd, options) {\n  // Checks if pwd is invalid\n  if (typeof pwd !== 'string') {\n    throw new Error(error.password);\n  }\n\n  // Sets password string\n  this.password = pwd;\n\n  // Sets that no inversion takes place by default\n  this.positive = true;\n  var _this = this;\n  if (options && options.list === true) {\n    return this.properties.reduce(function (errorList, property) {\n      // Applies all validations defined in lib one by one\n      if (!_isPasswordValidFor.call(_this, property)) {\n        // If the validation for a property fails,\n        // add it to the error list\n        return errorList.concat(property.method);\n      }\n      return errorList;\n    }, []);\n  }\n\n  // Returns the result of the validations\n  return this.properties.every(function (property) {\n    // Applies all validations defined in lib one by one\n    return _isPasswordValidFor.call(_this, property);\n  });\n};\n\n/**\n * Rule to invert the next applied rules.\n * All the rules applied after 'not' will have opposite effect,\n * until 'has' rule is applied\n */\nPasswordValidator.prototype.not = function not() {\n  return _register.call(this, 'not', arguments);\n};\n\n/**\n * Rule to invert the effects of 'not'\n * Apart from that, 'has' is also used\n * to make the api readable and chainable\n */\nPasswordValidator.prototype.has = function has() {\n  return _register.call(this, 'has', arguments);\n};\n\n/**\n * Rule to invert the effects of 'not'\n * Apart from that, 'is' is also used\n * to make the api readable and chainable\n */\nPasswordValidator.prototype.is = function is() {\n  return _register.call(this, 'is', arguments);\n};\n\n/**\n * Rule to specify a minimum length of the password\n *\n * @param {number} num - minimum length\n */\nPasswordValidator.prototype.min = function min(num) {\n  _validateLength(num);\n  return _register.call(this, 'min', arguments);\n};\n\n/**\n * Rule to specify a maximum length of the password\n *\n * @param {number} num - maximum length\n */\nPasswordValidator.prototype.max = function max(num) {\n  _validateLength(num);\n  return _register.call(this, 'max', arguments);\n};\n\n/**\n * Rule to mandate the presence of digits in the password\n */\nPasswordValidator.prototype.digits = function digits() {\n  return _register.call(this, 'digits', arguments);\n};\n\n/**\n * Rule to mandate the presence of letters in the password\n */\nPasswordValidator.prototype.letters = function letters() {\n  return _register.call(this, 'letters', arguments);\n};\n\n/**\n * Rule to mandate the presence of uppercase letters in the password\n */\nPasswordValidator.prototype.uppercase = function uppercase() {\n  return _register.call(this, 'uppercase', arguments);\n};\n\n/**\n * Rule to mandate the presence of lowercase letters in the password\n */\nPasswordValidator.prototype.lowercase = function lowercase() {\n  return _register.call(this, 'lowercase', arguments);\n};\n\n/**\n * Rule to mandate the presence of symbols in the password\n */\nPasswordValidator.prototype.symbols = function symbols() {\n  return _register.call(this, 'symbols', arguments);\n};\n\n/**\n * Rule to mendate the presense of space in the password\n * It can be used along with 'not' to not allow spaces\n * in the password\n */\nPasswordValidator.prototype.spaces = function spaces() {\n  return _register.call(this, 'spaces', arguments);\n};\n\n/**\n * Rule to whitelist words to be used as password\n *\n * @param {array} list - list of values allowed\n */\nPasswordValidator.prototype.oneOf = function oneOf() {\n  return _register.call(this, 'oneOf', arguments);\n};\nmodule.exports = PasswordValidator;","map":{"version":3,"names":["lib","require","error","_validateLength","num","Error","length","_isPasswordValidFor","property","method","apply","arguments","_register","func","args","properties","push","PasswordValidator","prototype","validate","pwd","options","password","positive","_this","list","reduce","errorList","call","concat","every","not","has","is","min","max","digits","letters","uppercase","lowercase","symbols","spaces","oneOf","module","exports"],"sources":["D:/Task/dashboard/node_modules/password-validator/src/index.js"],"sourcesContent":["var lib = require('./lib');\nvar error = require('./constants').error;\n\n/**\n * Validates that a number is a valid length (positive number)\n *\n * @private\n * @param {number} num - Number to validate\n */\nfunction _validateLength(num) {\n  if (!num || typeof num !== 'number' || num < 0) {\n    throw new Error(error.length);\n  }\n}\n\n/**\n * Tests a validation and return the result\n *\n * @private\n * @param {string} property - Property to validate\n * @return {boolean} Boolean value indicting the validity\n *           of the password against the property\n */\nfunction _isPasswordValidFor(property) {\n  return lib[property.method].apply(this, property.arguments);\n}\n\n/**\n * Registers the properties of a password-validation schema object\n *\n * @private\n * @param {string} func - Property name\n * @param {array} args - arguments for the func property\n */\nfunction _register(func, args) {\n  // Add property to the schema\n  this.properties.push({ method: func, arguments: args });\n  return this;\n}\n\n/**\n * Creates a password-validator schema\n *\n * @constructor\n */\nfunction PasswordValidator() {\n  // Initialize a schema with no properties defined\n  this.properties = [];\n}\n\n/**\n * Method to validate the password against schema\n *\n * @param {string} pwd - password to valdiate\n * @param {object} options - optional options to configure validation\n * @param {boolean} [options.list] - asks for a list of validation\n *           failures instead of just true/false\n * @return {boolean|array} Boolean value indicting the validity\n *           of the password as per schema, if 'options.list'\n *           is not set. Otherwise, it returns an array of\n *           property names which failed validations\n */\nPasswordValidator.prototype.validate = function (pwd, options) {\n  // Checks if pwd is invalid\n  if (typeof pwd !== 'string') {\n    throw new Error(error.password);\n  }\n\n  // Sets password string\n  this.password = pwd;\n\n  // Sets that no inversion takes place by default\n  this.positive = true;\n\n  var _this = this;\n\n  if (options && options.list === true) {\n    return this.properties.reduce(function (errorList, property) {\n      // Applies all validations defined in lib one by one\n      if (!_isPasswordValidFor.call(_this, property)) {\n        // If the validation for a property fails,\n        // add it to the error list\n        return errorList.concat(property.method);\n      }\n      return errorList;\n    }, []);\n  }\n\n  // Returns the result of the validations\n  return this.properties.every(function (property) {\n    // Applies all validations defined in lib one by one\n    return _isPasswordValidFor.call(_this, property);\n  });\n};\n\n/**\n * Rule to invert the next applied rules.\n * All the rules applied after 'not' will have opposite effect,\n * until 'has' rule is applied\n */\nPasswordValidator.prototype.not = function not() {\n  return _register.call(this, 'not', arguments);\n};\n\n/**\n * Rule to invert the effects of 'not'\n * Apart from that, 'has' is also used\n * to make the api readable and chainable\n */\nPasswordValidator.prototype.has = function has() {\n  return _register.call(this, 'has', arguments);\n};\n\n/**\n * Rule to invert the effects of 'not'\n * Apart from that, 'is' is also used\n * to make the api readable and chainable\n */\nPasswordValidator.prototype.is = function is() {\n  return _register.call(this, 'is', arguments);\n};\n\n/**\n * Rule to specify a minimum length of the password\n *\n * @param {number} num - minimum length\n */\nPasswordValidator.prototype.min = function min(num) {\n  _validateLength(num);\n  return _register.call(this, 'min', arguments);\n};\n\n/**\n * Rule to specify a maximum length of the password\n *\n * @param {number} num - maximum length\n */\nPasswordValidator.prototype.max = function max(num) {\n  _validateLength(num);\n  return _register.call(this, 'max', arguments);\n};\n\n/**\n * Rule to mandate the presence of digits in the password\n */\nPasswordValidator.prototype.digits = function digits() {\n  return _register.call(this, 'digits', arguments);\n};\n\n/**\n * Rule to mandate the presence of letters in the password\n */\nPasswordValidator.prototype.letters = function letters() {\n  return _register.call(this, 'letters', arguments);\n};\n\n/**\n * Rule to mandate the presence of uppercase letters in the password\n */\nPasswordValidator.prototype.uppercase = function uppercase() {\n  return _register.call(this, 'uppercase', arguments);\n};\n\n/**\n * Rule to mandate the presence of lowercase letters in the password\n */\nPasswordValidator.prototype.lowercase = function lowercase() {\n  return _register.call(this, 'lowercase', arguments);\n};\n\n/**\n * Rule to mandate the presence of symbols in the password\n */\nPasswordValidator.prototype.symbols = function symbols() {\n  return _register.call(this, 'symbols', arguments);\n};\n\n/**\n * Rule to mendate the presense of space in the password\n * It can be used along with 'not' to not allow spaces\n * in the password\n */\nPasswordValidator.prototype.spaces = function spaces() {\n  return _register.call(this, 'spaces', arguments);\n};\n\n/**\n * Rule to whitelist words to be used as password\n *\n * @param {array} list - list of values allowed\n */\nPasswordValidator.prototype.oneOf = function oneOf() {\n  return _register.call(this, 'oneOf', arguments);\n};\n\nmodule.exports = PasswordValidator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}