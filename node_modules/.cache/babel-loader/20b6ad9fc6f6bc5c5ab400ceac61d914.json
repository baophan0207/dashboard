{"ast":null,"code":"/**\n * Generic method to test regex\n *\n * @private\n * @param {string} regex - regex to test\n *                           with password\n */\nvar regex = require('./constants').regex;\nfunction _process(regexp) {\n  return new RegExp(regexp).test(this.password) === this.positive;\n}\nmodule.exports = {\n  /**\n   * Method to invert the next validations\n   *\n   * @param {RegExp} [symbol] - custom Regex which should not be present\n   */\n  not: function not(symbol) {\n    this.positive = false;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n  /**\n   * Method to invert the effects of not()\n   *\n   * @param {RegExp} [symbol] - custom Regex which should be present\n   */\n  has: function has(symbol) {\n    this.positive = true;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n  /**\n   * Method to invert the effects of not() and\n   * to make the api readable and chainable\n   *\n   */\n  is: function is() {\n    this.positive = true;\n    return true;\n  },\n  /**\n   * Method to specify a minimum length\n   *\n   * @param {number} num - minimum length\n   */\n  min: function min(num) {\n    return this.password.length >= num;\n  },\n  /**\n   * Method to specify a maximum length\n   *\n   * @param {number} num - maximum length\n   */\n  max: function max(num) {\n    return this.password.length <= num;\n  },\n  /**\n   * Method to validate the presence of digits\n   */\n  digits: function digits() {\n    return _process.call(this, regex.digits);\n  },\n  /**\n   * Method to validate the presence of letters\n   */\n  letters: function letters() {\n    return _process.call(this, regex.letters);\n  },\n  /**\n   * Method to validate the presence of uppercase letters\n   */\n  uppercase: function uppercase() {\n    return this.password !== this.password.toLowerCase() === this.positive;\n  },\n  /**\n   * Method to validate the presence of lowercase letters\n   */\n  lowercase: function lowercase() {\n    return this.password !== this.password.toUpperCase() === this.positive;\n  },\n  /**\n   * Method to validate the presence of symbols\n   */\n  symbols: function symbols() {\n    return _process.call(this, regex.symbols);\n  },\n  /**\n   * Method to validate the presence of space\n   */\n  spaces: function spaces() {\n    return _process.call(this, regex.spaces);\n  },\n  /**\n   * Method to provide pre-defined values for password\n   *\n   * @param {array} list - list of values allowed\n   */\n  oneOf: function oneOf(list) {\n    return list.indexOf(this.password) >= 0 === this.positive;\n  }\n};","map":{"version":3,"names":["regex","require","_process","regexp","RegExp","test","password","positive","module","exports","not","symbol","call","has","is","min","num","length","max","digits","letters","uppercase","toLowerCase","lowercase","toUpperCase","symbols","spaces","oneOf","list","indexOf"],"sources":["D:/Task/dashboard/node_modules/password-validator/src/lib.js"],"sourcesContent":["/**\n * Generic method to test regex\n *\n * @private\n * @param {string} regex - regex to test\n *                           with password\n */\nvar regex = require('./constants').regex;\n\nfunction _process(regexp) {\n  return new RegExp(regexp).test(this.password) === this.positive;\n}\n\nmodule.exports = {\n\n  /**\n   * Method to invert the next validations\n   *\n   * @param {RegExp} [symbol] - custom Regex which should not be present\n   */\n  not: function not(symbol) {\n    this.positive = false;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not()\n   *\n   * @param {RegExp} [symbol] - custom Regex which should be present\n   */\n  has: function has(symbol) {\n    this.positive = true;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not() and\n   * to make the api readable and chainable\n   *\n   */\n  is: function is() {\n    this.positive = true;\n    return true;\n  },\n\n  /**\n   * Method to specify a minimum length\n   *\n   * @param {number} num - minimum length\n   */\n  min: function min(num) {\n    return this.password.length >= num;\n  },\n\n  /**\n   * Method to specify a maximum length\n   *\n   * @param {number} num - maximum length\n   */\n  max: function max(num) {\n    return this.password.length <= num;\n  },\n\n  /**\n   * Method to validate the presence of digits\n   */\n  digits: function digits() {\n    return _process.call(this, regex.digits);\n  },\n\n  /**\n   * Method to validate the presence of letters\n   */\n  letters: function letters() {\n    return _process.call(this, regex.letters);\n  },\n\n  /**\n   * Method to validate the presence of uppercase letters\n   */\n  uppercase: function uppercase() {\n    return (this.password !== this.password.toLowerCase()) === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of lowercase letters\n   */\n  lowercase: function lowercase() {\n    return (this.password !== this.password.toUpperCase()) === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of symbols\n   */\n  symbols: function symbols() {\n    return _process.call(this, regex.symbols);\n  },\n\n  /**\n   * Method to validate the presence of space\n   */\n  spaces: function spaces() {\n    return _process.call(this, regex.spaces);\n  },\n\n  /**\n   * Method to provide pre-defined values for password\n   *\n   * @param {array} list - list of values allowed\n   */\n  oneOf: function oneOf(list) {\n    return list.indexOf(this.password) >= 0 === this.positive;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}