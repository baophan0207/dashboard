var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
import React, { useEffect, useState } from "react";
import styled from "styled-components";
import Input from "../inputs/Input";
import { Label } from "../inputs/Label";
import { parseHexColor } from "../common";
var Wrapper = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n\tflex: 1;\n\tdisplay: flex;\n\talign-items: center;\n"], ["\n\tflex: 1;\n\tdisplay: flex;\n\talign-items: center;\n"])));
var Slider = styled.input(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n\tflex: 1;\n\n\tappearance: none;\n\twidth: 100%;\n\theight: 2px;\n\tbackground: #555a;\n\toutline: none;\n\n\t&::-webkit-slider-thumb {\n\t\tappearance: none;\n\t\twidth: 12px;\n\t\theight: 12px;\n\t\tborder-radius: 50%;\n\t\tbackground: #4285f4;\n\t\tcursor: pointer;\n\t}\n"], ["\n\tflex: 1;\n\n\tappearance: none;\n\twidth: 100%;\n\theight: 2px;\n\tbackground: #555a;\n\toutline: none;\n\n\t&::-webkit-slider-thumb {\n\t\tappearance: none;\n\t\twidth: 12px;\n\t\theight: 12px;\n\t\tborder-radius: 50%;\n\t\tbackground: #4285f4;\n\t\tcursor: pointer;\n\t}\n"])));
var useHex = function (value) {
    var _a = useState(0), alpha = _a[0], setAlpha = _a[1];
    var _b = useState(""), color = _b[0], setColor = _b[1];
    useEffect(function () {
        var values = parseHexColor(value);
        if (values) {
            setAlpha(values.alpha);
            setColor(values.color);
        }
    }, [value]);
    return { color: color, alpha: alpha };
};
export default (function (_a) {
    var value = _a.value, onChange = _a.onChange;
    var _b = useHex(value), color = _b.color, alpha = _b.alpha;
    var updated = function (e) {
        onChange(e.target.value + alpha.toString(16).padStart(2, "0"));
    };
    var updatedInput = function (e) {
        onChange(e);
    };
    var updatedAlpha = function (e) {
        var hex = parseInt(e.target.value).toString(16).padStart(2, "0");
        onChange(color + hex);
    };
    return (React.createElement(Wrapper, null,
        React.createElement(Label, null, "Color"),
        React.createElement(Input, { value: value, onChange: updatedInput }),
        React.createElement("input", { value: color, onChange: updated, type: "color" }),
        React.createElement(Slider, { className: "shadow-picker__slider", type: "range", value: alpha, onChange: updatedAlpha, max: 255 })));
});
var templateObject_1, templateObject_2;
//# sourceMappingURL=ColorField.js.map