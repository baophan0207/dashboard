var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useEffect, useState } from "react";
import styled from "styled-components";
import TypeField from "./fields/TypeField";
import OffsetField from "./fields/OffsetField";
import SliderField from "./fields/SliderField";
import ColorField from "./fields/ColorField";
import { buildShadowString, parseShadowString } from "./common";
var Wrapper = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n\tpadding: 8px;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground: #2a2a2a;\n\n\twidth: 240px;\n\theight: 240px;\n\tfont-size: 14px;\n\n\tfont-family: sans-serif;\n\tcolor: #bec6cf;\n"], ["\n\tpadding: 8px;\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground: #2a2a2a;\n\n\twidth: 240px;\n\theight: 240px;\n\tfont-size: 14px;\n\n\tfont-family: sans-serif;\n\tcolor: #bec6cf;\n"])));
var useShadowParameters = function (onChange, value) {
    var isControlled = value && onChange;
    var _a = useState({}), state = _a[0], setState = _a[1];
    useEffect(function () {
        if (!isControlled)
            return;
        var p = parseShadowString(value);
        if (p)
            setState(p);
    }, [value]);
    useEffect(function () {
        if (isControlled)
            return;
        var newValue = buildShadowString(state);
        onChange(newValue);
    }, [state]);
    var updateState = function (column) { return function (value) {
        var _a;
        var newParams = __assign(__assign({}, state), (_a = {}, _a[column] = value, _a));
        onChange(buildShadowString(newParams));
        !isControlled && setState(newParams);
    }; };
    return [state, updateState];
};
export default (function (_a) {
    var onChange = _a.onChange, value = _a.value, _b = _a.className, className = _b === void 0 ? "" : _b;
    var _c = useShadowParameters(onChange, value), state = _c[0], updateState = _c[1];
    return (React.createElement(Wrapper, { className: "shadow-picker " + className },
        React.createElement(TypeField, { value: (state === null || state === void 0 ? void 0 : state.position) || "outside", onChange: updateState("position") }),
        React.createElement(OffsetField, { value: (state === null || state === void 0 ? void 0 : state.offset) || { x: "0", y: "0" }, onChange: updateState("offset") }),
        React.createElement(SliderField, { value: (state === null || state === void 0 ? void 0 : state.blur) || "0", onChange: updateState("blur"), title: "Blur" }),
        React.createElement(SliderField, { value: (state === null || state === void 0 ? void 0 : state.spread) || "0", onChange: updateState("spread"), title: "Spread" }),
        React.createElement(ColorField, { value: (state === null || state === void 0 ? void 0 : state.color) || "#000000", onChange: updateState("color") })));
});
var templateObject_1;
//# sourceMappingURL=ShadowPicker.js.map