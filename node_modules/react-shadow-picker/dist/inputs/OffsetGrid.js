var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
import React, { useEffect, useRef, useState } from "react";
import styled from "styled-components";
var Wrapper = styled.svg(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n\twidth: 100px;\n\theight: 100px;\n\tborder: 1px solid #5a5a5a;\n\tcursor: ", ";\n"], ["\n\twidth: 100px;\n\theight: 100px;\n\tborder: 1px solid #5a5a5a;\n\tcursor: ", ";\n"])), function (p) { return (p.dragging ? "grabbing" : "grab"); });
var Handle = styled.circle(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n\tcolor: #4285f4;\n\tpointer-events: none;\n"], ["\n\tcolor: #4285f4;\n\tpointer-events: none;\n"])));
var Line = styled.line(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n\tcolor: #555a;\n"], ["\n\tcolor: #555a;\n"])));
export default (function (_a) {
    var _b = _a.offset, x = _b.x, y = _b.y, _c = _a.max, max = _c === void 0 ? 20 : _c, onChange = _a.onChange;
    var _d = useState(false), dragging = _d[0], setDragging = _d[1];
    var svg = useRef();
    var onMove = function (e) {
        if (!dragging || !(svg === null || svg === void 0 ? void 0 : svg.current))
            return;
        updatePos(e);
    };
    var updatePos = function (e) {
        var point = svg.current.createSVGPoint();
        point.x = e.clientX;
        point.y = e.clientY;
        var t = point.matrixTransform(svg.current.getScreenCTM().inverse());
        var offset = {
            x: Math.trunc((t.x - 50) * (max / 50) * 100) / 100,
            y: Math.trunc((t.y - 50) * (max / 50) * 100) / 100,
        };
        onChange(offset);
    };
    useEffect(function () {
        var listener = function (e) {
            if (e.target.getAttribute("data-touch")) {
                e.preventDefault();
                e.touches && updatePos(e.touches[0]);
            }
        };
        window.addEventListener("touchmove", listener, { passive: false });
        return function () { return window.removeEventListener("touchmove", listener); };
    }, [updatePos]);
    var posX = (50 / max) * x + 50;
    var posY = (50 / max) * y + 50;
    return (React.createElement(Wrapper, { ref: svg, onMouseMove: onMove, onMouseDown: function () { return setDragging(true); }, onMouseUp: function () { return setDragging(false); }, dragging: dragging, "data-touch": true, className: "shadow-picker__grid", viewBox: "0 0 100 100" },
        React.createElement(Line, { x1: 50, y1: 0, x2: 50, y2: 100, strokeWidth: 2, strokeDasharray: "2,1", stroke: "currentColor", className: "shadow-picker__grid-line" }),
        React.createElement(Line, { x1: 0, y1: 50, x2: 100, y2: 50, strokeDasharray: "2,1", strokeWidth: 2, stroke: "currentColor", className: "shadow-picker__grid-line" }),
        React.createElement(Line, { x1: 50, y1: 50, x2: posX, y2: posY, strokeWidth: 2, stroke: "currentColor", className: "shadow-picker__grid-line" }),
        React.createElement(Handle, { className: "shadow-picker__grid-handle", cx: posX, cy: posY, r: 5, fill: "currentColor" })));
});
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=OffsetGrid.js.map