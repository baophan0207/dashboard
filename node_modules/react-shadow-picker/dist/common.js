import { useEffect, useState } from "react";
export var unitRegex = /(-?\d+)((r?em)|(px)|\%)$/;
export var parseShadowString = function (value) {
    var parts = value.split(" ");
    var position = "outside";
    if (parts[0] === "inset") {
        parts.shift();
        position = "inside";
    }
    if (parts.length === 3) {
        var x = parts[0], y = parts[1], color = parts[2];
        return { offset: { x: x, y: y }, color: color, position: position };
    }
    if (parts.length === 4) {
        var x = parts[0], y = parts[1], blur_1 = parts[2], color = parts[3];
        return { offset: { x: x, y: y }, color: color, blur: blur_1, position: position };
    }
    if (parts.length === 5) {
        var x = parts[0], y = parts[1], blur_2 = parts[2], spread = parts[3], color = parts[4];
        return { offset: { x: x, y: y }, color: color, spread: spread, blur: blur_2, position: position };
    }
    return null;
};
export var buildShadowString = function (params) {
    var _a, _b;
    var values = [
        params.position === "inside" ? "inset" : undefined,
        ((_a = params.offset) === null || _a === void 0 ? void 0 : _a.x) || "0",
        ((_b = params.offset) === null || _b === void 0 ? void 0 : _b.y) || "0",
        params.blur,
        params.spread,
        params.color || "#000000",
    ].filter(function (p) { return !!p; });
    return values.join(" ");
};
export var parseHexColor = function (value) {
    var _a;
    var match = value.match(/#(?<hex>[0-9A-F]{6,8})/i);
    var hex = (_a = match === null || match === void 0 ? void 0 : match.groups) === null || _a === void 0 ? void 0 : _a.hex;
    if (hex) {
        var alpha = 255;
        if (hex.length === 8) {
            alpha = parseInt(hex.substr(6, 2), 16);
        }
        return { alpha: alpha, color: "#" + hex.substr(0, 6) };
    }
    return null;
};
export var useUnitValue = function (value) {
    var _a = useState(0), amount = _a[0], setAmount = _a[1];
    var _b = useState("px"), unit = _b[0], setUnit = _b[1];
    useEffect(function () {
        var matches = value.match(unitRegex);
        if ((matches === null || matches === void 0 ? void 0 : matches.length) === 5) {
            setAmount(parseInt(matches[1]));
            setUnit(matches[2]);
        }
    }, [value]);
    return { unit: unit, amount: amount, setUnit: setUnit, setAmount: setAmount };
};
//# sourceMappingURL=common.js.map